<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.6-dev (doctrine2-zf2inputfilterannotation) on 2015-02-02
 * 21:38:10.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace ersEntity\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Zend\InputFilter\InputFilter;
use Zend\InputFilter\Factory as InputFactory;
use Zend\InputFilter\InputFilterAwareInterface;
use Zend\InputFilter\InputFilterInterface;

/**
 * Entity\Order
 *
 * @ORM\Entity()
 * @ORM\Table(name="`Order`", indexes={@ORM\Index(name="fk_Order_User1_idx", columns={"Purchaser_id"}), @ORM\Index(name="fk_Order_PaymentType1_idx", columns={"PaymentType_id"}), @ORM\Index(name="fk_Order_Code1_idx", columns={"Code_id"})})
 * @ORM\HasLifecycleCallbacks()
 */
class Order implements InputFilterAwareInterface
{
    /**
     * Instance of InputFilterInterface.
     *
     * @var InputFilter
     */
    private $inputFilter;

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(type="integer")
     */
    protected $Purchaser_id;

    /**
     * @ORM\Column(type="integer")
     */
    protected $PaymentType_id;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $matchKey;

    /**
     * @ORM\Column(type="text", nullable=true)
     */
    protected $invoiceDetail;
    
    /**
     * @ORM\Column(type="string", length=45)
     */
    protected $status = 'unpaid';

    /**
     * @ORM\Column(type="datetime")
     */
    protected $updated;

    /**
     * @ORM\Column(type="datetime")
     */
    protected $created;

    /**
     * @ORM\Column(type="integer")
     */
    protected $Code_id;

    /**
     * @ORM\OneToMany(targetEntity="Match", mappedBy="order")
     * @ORM\JoinColumn(name="id", referencedColumnName="Order_id")
     */
    protected $matches;

    /**
     * @ORM\OneToMany(targetEntity="Package", mappedBy="order")
     * @ORM\JoinColumn(name="id", referencedColumnName="Order_id")
     */
    protected $packages;

    /**
     * @ORM\ManyToOne(targetEntity="User", inversedBy="orders")
     * @ORM\JoinColumn(name="Purchaser_id", referencedColumnName="id")
     */
    protected $purchaser;

    /**
     * @ORM\ManyToOne(targetEntity="PaymentType", inversedBy="orders")
     * @ORM\JoinColumn(name="PaymentType_id", referencedColumnName="id")
     */
    protected $paymentType;

    /**
     * @ORM\ManyToOne(targetEntity="Code", inversedBy="orders")
     * @ORM\JoinColumn(name="Code_id", referencedColumnName="id")
     */
    protected $code;

    public function __construct()
    {
        $this->matches = new ArrayCollection();
        $this->packages = new ArrayCollection();
        
        $package = new Package();
        $unassigned = new User();
        $unassigned->setSessionId(0);
        $package->setParticipant($unassigned);

        $this->addPackage($package);
    }
    
    /**
     * @ORM\PrePersist
     */
    public function PrePersist()
    {
        if(!isset($this->created)) {
            $this->created = new \DateTime();
        }
        $this->updated = new \DateTime();
    }
    
    /**
     * Set id of this object to null if it's cloned
     */
    public function __clone() {
        $this->id = null;
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Entity\Order
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of Purchaser_id.
     *
     * @param integer $Purchaser_id
     * @return \Entity\Order
     */
    public function setPurchaserId($Purchaser_id)
    {
        $this->Purchaser_id = $Purchaser_id;

        return $this;
    }

    /**
     * Get the value of Purchaser_id.
     *
     * @return integer
     */
    public function getPurchaserId()
    {
        return $this->Purchaser_id;
    }

    /**
     * Set the value of PaymentType_id.
     *
     * @param integer $PaymentType_id
     * @return \Entity\Order
     */
    public function setPaymentTypeId($PaymentType_id)
    {
        $this->PaymentType_id = $PaymentType_id;

        return $this;
    }

    /**
     * Get the value of PaymentType_id.
     *
     * @return integer
     */
    public function getPaymentTypeId()
    {
        return $this->PaymentType_id;
    }

    /**
     * Set the value of matchKey.
     *
     * @param string $matchKey
     * @return \Entity\Order
     */
    public function setMatchKey($matchKey)
    {
        $this->matchKey = $matchKey;

        return $this;
    }

    /**
     * Get the value of matchKey.
     *
     * @return string
     */
    public function getMatchKey()
    {
        return $this->matchKey;
    }

    /**
     * Set the value of invoiceDetail.
     *
     * @param string $invoiceDetail
     * @return \Entity\Order
     */
    public function setInvoiceDetail($invoiceDetail)
    {
        $this->invoiceDetail = $invoiceDetail;

        return $this;
    }

    /**
     * Get the value of invoiceDetail.
     *
     * @return string
     */
    public function getInvoiceDetail()
    {
        return $this->invoiceDetail;
    }
    
    /**
     * Set the value of status.
     *
     * @param string $stauts
     * @return \Entity\Order
     */
    public function setStatus($status)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Get the value of status.
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set the value of updated.
     *
     * @param datetime $updated
     * @return \Entity\Order
     */
    public function setUpdated($updated)
    {
        $this->updated = $updated;

        return $this;
    }

    /**
     * Get the value of updated.
     *
     * @return datetime
     */
    public function getUpdated()
    {
        return $this->updated;
    }

    /**
     * Set the value of created.
     *
     * @param datetime $created
     * @return \Entity\Order
     */
    public function setCreated($created)
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Get the value of created.
     *
     * @return datetime
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * Set the value of Code_id.
     *
     * @param integer $Code_id
     * @return \Entity\Order
     */
    public function setCodeId($Code_id)
    {
        $this->Code_id = $Code_id;

        return $this;
    }

    /**
     * Get the value of Code_id.
     *
     * @return integer
     */
    public function getCodeId()
    {
        return $this->Code_id;
    }

    /**
     * Add Match entity to collection (one to many).
     *
     * @param \Entity\Match $match
     * @return \Entity\Order
     */
    public function addMatch(Match $match)
    {
        $this->matches[] = $match;

        return $this;
    }

    /**
     * Remove Match entity from collection (one to many).
     *
     * @param \Entity\Match $match
     * @return \Entity\Order
     */
    public function removeMatch(Match $match)
    {
        $this->matches->removeElement($match);

        return $this;
    }

    /**
     * Get Match entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getMatches()
    {
        return $this->matches;
    }

    /**
     * Add Package entity to collection (one to many).
     *
     * @param \Entity\Package $package
     * @return \Entity\Order
     */
    public function addPackage(Package $package)
    {
        if(!is_numeric($package->getSessionId())) {
            $id = \count($this->getPackages())+1;
            $package->setSessionId($id);
        }
        $this->packages[] = $package;

        return $this;
    }
    
    /**
     * Remove Package entity from collection (one to many).
     *
     * @param \Entity\Package $package
     * @return \Entity\Order
     */
    public function removePackage(Package $package)
    {
        $this->packages->removeElement($package);

        return $this;
    }

    /**
     * Get Package entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPackages()
    {
        return $this->packages;
    }
    
    /**
     * Get Package by participant session id.
     * 
     * @return Entity\Package
     */
    public function getPackageByParticipantSessionId($id) {
        foreach($this->getPackages() as $package) {
            if($package->getParticipant()->getSessionId() == $id) {
                return $package;
            }
        }
        return false;
    }
    
    /**
     * Add Item to the according package with the correct Purchaser_id
     * 
     * @param \Entity\Item $item
     * @param integer $Participant_id
     * @return \Entity\Order
     */
    public function addItem(Item $item, $Participant_id)
    {
        $package = $this->getPackageByParticipantSessionId($Participant_id);
        $package->addItem($item);
        
        return $this;
    }
    
    /**
     * get Item by participant_id and item_id
     * 
     * @param integer $participant_id
     * @param integer $item_id
     * 
     * @return \Entity\Item
     * @return false
     */
    public function getItem($participant_id, $item_id) {
        $package = $this->getPackageByParticipantSessionId($participant_id);
        if($package) {
            return $package->getItemBySessionId($item_id);    
        }
        return false;
    }
    
    /**
     * get Items of this order
     * 
     * @return ArrayCollection
     */
    public function getItems() {
        $items = new ArrayCollection();
        foreach($this->getPackages() as $package) {
            $items = new ArrayCollection(array_merge($items->toArray(), $package->getItems()->toArray()));
        }
        
        return $items;
    }
    
    /**
     * remove Item by participant_id and item_id
     * 
     * @param integer $participant_id
     * @param integer $item_id
     * 
     * @return \Entity\Order
     */
    public function removeItem($participant_id, $item_id) {
        $package = $this->getPackageByParticipantSessionId($participant_id);
        if($package) {
            $package->removeItemBySessionId($item_id);    
        }
        
        return $this;
    }

    /**
     * Get Participants of Packages
     * 
     * @return array
     */
    public function getParticipants() {
        $participants = array();
        foreach($this->getPackages() as $package) {
            if($package->getParticipant()->getPrename() != '' && $package->getParticipant()->getSurname() != '') {
                $id = $package->getParticipant()->getSessionId();
                $participants[$id] = $package->getParticipant();
            }
        }
        
        return $participants;
    }
    
    /**
     * Get Participant by session_id
     * 
     * @return Entity\User
     * @return false
     */
    public function getParticipantBySessionId($id) {
        foreach($this->getPackages() as $package) {
            if($package->getParticipant()->getSessionId() == $id) {
                return $package->getParticipant();
            }
        }
        return false;
    }
    
    /**
     * Set Participant by session_id
     * 
     * @return boolean
     */
    public function setParticipantBySessionId(User $user, $id) {
        foreach($this->getPackages() as $package) {
            if($package->getParticipant()->getSessionId() == $id) {
                $package->setParticipant($user);
                return true;
            }
        }
        return false;
    }
    
    /**
     * Add Participant (add new Package and set participant)
     * 
     * @param \Entity\User $participant
     * @return \Entity\Order
     */
    
    public function addParticipant($participant) {
        $package = new Package();
        $id = \count($this->getPackages())+1;
        $participant->setSessionId($id);
        $package->setParticipant($participant);
        
        $this->packages[] = $package;
        
        return $this;
    }
    
    /**
     * Remove Package entity by participant
     *
     * @param int
     * @return \Entity\Order
     */
    public function removeParticipantBySessionId($id)
    {
        foreach($this->getPackages() as $package) {
            if($package->getParticipant()->getSessionId() == $id) {
                $this->packages->removeElement($package);
            }
        }

        return $this;
    }
    
    /**
     * Set Purchaser entity (many to one).
     *
     * @param \Entity\User $purchaser
     * @return \Entity\Order
     */
    public function setPurchaser(User $purchaser = null)
    {
        $this->purchaser = $purchaser;

        return $this;
    }

    /**
     * Get Purchaser entity (many to one).
     *
     * @return \Entity\User
     */
    public function getPurchaser()
    {
        return $this->purchaser;
    }

    /**
     * Set PaymentType entity (many to one).
     *
     * @param \Entity\PaymentType $paymentType
     * @return \Entity\Order
     */
    public function setPaymentType(PaymentType $paymentType = null)
    {
        $this->paymentType = $paymentType;
        if($paymentType) {
            $this->setPaymentTypeId($paymentType->getId());
        }

        return $this;
    }

    /**
     * Get PaymentType entity (many to one).
     *
     * @return \Entity\PaymentType
     */
    public function getPaymentType()
    {
        return $this->paymentType;
    }

    /**
     * Set Code entity (many to one).
     *
     * @param \Entity\Code $code
     * @return \Entity\Order
     */
    public function setCode(Code $code = null)
    {
        $this->code = $code;

        return $this;
    }

    /**
     * Get Code entity (many to one).
     *
     * @return \Entity\Code
     */
    public function getCode()
    {
        return $this->code;
    }
    
    /**
     * Get price of the complete order (excluding price fees)
     * 
     * @return float
     */
    public function getPrice() {
        $price = 0;
        foreach($this->getPackages() as $package) {
            foreach($package->getItems() as $item) {
                $price += $item->getPrice();
            }
        }
        
        return $price;
    }
    
    /**
     * Get total sum of the order (including price fees)
     * 
     * @return float
     */
    public function getSum() {
        $sum = $this->getPrice();
        $sum += $this->getPaymentType()->calcFee($sum);
        return $sum;
    }

    /**
     * Not used, Only defined to be compatible with InputFilterAwareInterface.
     * 
     * @param \Zend\InputFilter\InputFilterInterface $inputFilter
     * @throws \Exception
     */
    public function setInputFilter(InputFilterInterface $inputFilter)
    {
        throw new \Exception("Not used.");
    }

    /**
     * Return a for this entity configured input filter instance.
     *
     * @return InputFilterInterface
     */
    public function getInputFilter()
    {
        if ($this->inputFilter instanceof InputFilterInterface) {
            return $this->inputFilter;
        }
        $factory = new InputFactory();
        $filters = array(
            array(
                'name' => 'id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'Purchaser_id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'PaymentType_id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'matchKey',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'invoiceDetail',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'updated',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'created',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'Code_id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
        );
        $this->inputFilter = $factory->createInputFilter($filters);

        return $this->inputFilter;
    }

    /**
     * Populate entity with the given data.
     * The set* method will be used to set the data.
     *
     * @param array $data
     * @return boolean
     */
    public function populate(array $data = array())
    {
        foreach ($data as $field => $value) {
            $setter = sprintf('set%s', ucfirst(
                str_replace(' ', '', ucwords(str_replace('_', ' ', $field)))
            ));
            if (method_exists($this, $setter)) {
                $this->{$setter}($value);
            }
        }

        return true;
    }
    public function exchangeArray(array $data = array()) {
        $this->populate($data);
    }

    /**
     * Return a array with all fields and data.
     * Default the relations will be ignored.
     * 
     * @param array $fields
     * @return array
     */
    public function getArrayCopy(array $fields = array())
    {
        $dataFields = array('id', 'Purchaser_id', 'purchaser', 'PaymentType_id', 'paymentType', 'matchKey', 'invoiceDetail', 'updated', 'created', 'Code_id');
        $relationFields = array('user', 'paymentType', 'code');
        $copiedFields = array();
        foreach ($relationFields as $relationField) {
            $map = null;
            if (array_key_exists($relationField, $fields)) {
                $map = $fields[$relationField];
                $fields[] = $relationField;
                unset($fields[$relationField]);
            }
            if (!in_array($relationField, $fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $relationField)))));
            $relationEntity = $this->{$getter}();
            $copiedFields[$relationField] = (!is_null($map))
                ? $relationEntity->getArrayCopy($map)
                : $relationEntity->getArrayCopy();
            $fields = array_diff($fields, array($relationField));
        }
        foreach ($dataFields as $dataField) {
            if (!in_array($dataField, $fields) && !empty($fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $dataField)))));
            $copiedFields[$dataField] = $this->{$getter}();
        }

        return $copiedFields;
    }

    public function __sleep()
    {
        return array('id', 'Purchaser_id', 'purchaser', 'PaymentType_id', 'paymentType', 'matchKey', 'invoiceDetail', 'packages', 'updated', 'created', 'Code_id');
    }
}