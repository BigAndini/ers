<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.6-dev (doctrine2-zf2inputfilterannotation) on 2015-02-02
 * 21:38:10.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace ErsBase\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Zend\InputFilter\InputFilter;
use Zend\InputFilter\Factory as InputFactory;
use Zend\InputFilter\InputFilterAwareInterface;
use Zend\InputFilter\InputFilterInterface;

/**
 * Entity\BankAccountCsv
 *
 * @ORM\Entity()
 * @ORM\Table(name="BankAccountCsv")
 * @ORM\HasLifecycleCallbacks()
 */
class BankAccountCsv implements InputFilterAwareInterface
{
    /**
     * Instance of InputFilterInterface.
     *
     * @var InputFilter
     */
    private $inputFilter;

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(type="integer")
     */
    protected $BankAccount_id;

    /**
     * @ORM\Column(type="string", length=1000, nullable=true)
     */
    protected $csv_file;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $updated;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $created;

    /**
     * @ORM\OneToMany(targetEntity="BankStatement", mappedBy="bankAccountCsv")
     * @ORM\JoinColumn(name="id", referencedColumnName="bank_account_csv_id")
     */
    protected $bankStatements;

    /**
     * @ORM\ManyToOne(targetEntity="BankAccount", inversedBy="bankAccountCsvs")
     * @ORM\JoinColumn(name="BankAccount_id", referencedColumnName="id")
     */
    protected $bankAccount;

    public function __construct()
    {
        $this->bankStatements = new ArrayCollection();
    }
    
    /**
     * @ORM\PrePersist
     */
    public function PrePersist()
    {
        if(!isset($this->created)) {
            $this->created = new \DateTime();
        }
        $this->updated = new \DateTime();
    }
 
    /**
     * @ORM\PreUpdate
     */
    public function PreUpdate()
    {
        $this->updated = new \DateTime();
    }
    
    /**
     * Set id of this object to null if it's cloned
     */
    public function __clone() {
        $this->id = null;
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Entity\BankAccountCsv
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of BankAccount_id.
     *
     * @param integer $BankAccount_id
     * @return \Entity\BankAccountCsv
     */
    public function setBankAccountId($BankAccount_id)
    {
        $this->BankAccount_id = $BankAccount_id;

        return $this;
    }

    /**
     * Get the value of BankAccount_id.
     *
     * @return integer
     */
    public function getBankAccountId()
    {
        return $this->BankAccount_id;
    }

    /**
     * Set the value of csv_file.
     *
     * @param string $csv_file
     * @return \Entity\BankAccountCsv
     */
    public function setCsvFile($csv_file)
    {
        $this->csv_file = $csv_file;

        return $this;
    }

    /**
     * Get the value of csv_file.
     *
     * @return string
     */
    public function getCsvFile()
    {
        return $this->csv_file;
    }


    /**
     * Set the value of updated.
     *
     * @param datetime $updated
     * @return \Entity\BankAccountCsv
     */
    public function setUpdated($updated)
    {
        $this->updated = $updated;

        return $this;
    }

    /**
     * Get the value of updated.
     *
     * @return datetime
     */
    public function getUpdated()
    {
        return $this->updated;
    }

    /**
     * Set the value of created.
     *
     * @param datetime $created
     * @return \Entity\BankAccountCsv
     */
    public function setCreated($created)
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Get the value of created.
     *
     * @return datetime
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * Add BankStatement entity to collection (one to many).
     *
     * @param \Entity\BankStatement $bankStatement
     * @return \Entity\BankAccountCsv
     */
    public function addBankStatement(BankStatement $bankStatement)
    {
        $this->bankStatements[] = $bankStatement;

        return $this;
    }

    /**
     * Remove BankStatement entity from collection (one to many).
     *
     * @param \Entity\BankStatement $bankStatement
     * @return \Entity\BankAccountCsv
     */
    public function removeBankStatement(BankStatement $bankStatement)
    {
        $this->bankStatements->removeElement($bankStatement);

        return $this;
    }

    /**
     * Get BankStatement entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getBankStatements()
    {
        return $this->bankStatements;
    }
    
    /**
     * 
     * @return float
     */
    public function getAmount() {
        $statement_format  = json_decode($this->getStatementFormat());
        $amount = (float) 0;
        foreach($this->getBankStatements() as $statement) {
            $amount += (float) $statement->getBankStatementColByNumber($statement_format->amount)->getValue();
        }
        return $amount;
    }
    
    /**
     * Set BankAccount entity (many to one).
     *
     * @param \Entity\BankAccount $bankAccount
     * @return \Entity\BankAccountCsv
     */
    public function setBankAccount(BankAccount $bankAccount = null)
    {
        $this->bankAccount = $bankAccount;

        return $this;
    }

    /**
     * Get BankAccount entity (many to one).
     *
     * @return \Entity\BankAccount
     */
    public function getBankAccount()
    {
        return $this->bankAccount;
    }

    public function hasMatch() {
        foreach($this->getBankStatements() as $bs) {
            if(count($bs->getMatches()) > 0) {
                return true;
            }
        }
        return false;
    }

    /**
     * Not used, Only defined to be compatible with InputFilterAwareInterface.
     * 
     * @param \Zend\InputFilter\InputFilterInterface $inputFilter
     * @throws \Exception
     */
    public function setInputFilter(InputFilterInterface $inputFilter)
    {
        throw new \Exception("Not used.");
    }

    /**
     * Return a for this entity configured input filter instance.
     *
     * @return InputFilterInterface
     */
    public function getInputFilter()
    {
        if ($this->inputFilter instanceof InputFilterInterface) {
            return $this->inputFilter;
        }
        $factory = new InputFactory();
        $filters = array(
            array(
                'name' => 'id',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'BankAccount_id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'csv_file',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'updated',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'created',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
        );
        $this->inputFilter = $factory->createInputFilter($filters);

        return $this->inputFilter;
    }

    /**
     * Populate entity with the given data.
     * The set* method will be used to set the data.
     *
     * @param array $data
     * @return boolean
     */
    public function populate(array $data = array())
    {
        foreach ($data as $field => $value) {
            $setter = sprintf('set%s', ucfirst(
                str_replace(' ', '', ucwords(str_replace('_', ' ', $field)))
            ));
            if (method_exists($this, $setter)) {
                $this->{$setter}($value);
            }
        }

        return true;
    }
    
    /**
     * Return a array with all fields and data.
     * Default the relations will be ignored.
     * 
     * @param array $fields
     * @return array
     */
    public function getArrayCopy(array $fields = array())
    {
        $dataFields = array('id', 'BankAccount_id', 'csv_file', 'updated', 'created');
        $relationFields = array();
        $copiedFields = array();
        foreach ($relationFields as $relationField) {
            $map = null;
            if (array_key_exists($relationField, $fields)) {
                $map = $fields[$relationField];
                $fields[] = $relationField;
                unset($fields[$relationField]);
            }
            if (!in_array($relationField, $fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $relationField)))));
            $relationEntity = $this->{$getter}();
            $copiedFields[$relationField] = (!is_null($map))
                ? $relationEntity->getArrayCopy($map)
                : $relationEntity->getArrayCopy();
            $fields = array_diff($fields, array($relationField));
        }
        foreach ($dataFields as $dataField) {
            if (!in_array($dataField, $fields) && !empty($fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $dataField)))));
            $copiedFields[$dataField] = $this->{$getter}();
        }

        return $copiedFields;
    }

    public function __sleep()
    {
        return array('id', 'BankAccount_id', 'csv_file', 'updated', 'created');
    }
}