<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.6-dev (doctrine2-mappedsuperclass) on 2017-07-19 23:21:08.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace ErsBase\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * ErsBase\Entity\Base\Mailq
 *
 * @ORM\MappedSuperclass
 * @ORM\Table(name="`mailq`", indexes={@ORM\Index(name="fk_mailq_user1_idx", columns={"`from_id`"})})
 * @ORM\HasLifecycleCallbacks
 */
abstract class Mailq
{
    /**
     * @ORM\Id
     * @ORM\Column(name="`id`", type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(name="`from_id`", type="integer")
     */
    protected $from_id;

    /**
     * @ORM\Column(name="`subject`", type="string", length=255, nullable=true)
     */
    protected $subject;

    /**
     * @ORM\Column(name="`text_message`", type="text", nullable=true)
     */
    protected $text_message;

    /**
     * @ORM\Column(name="`html_message`", type="text", nullable=true)
     */
    protected $html_message;

    /**
     * @ORM\Column(name="`is_html`", type="boolean", nullable=true)
     */
    protected $is_html;

    /**
     * @ORM\Column(name="`updated`", type="datetime", nullable=true)
     */
    protected $updated;

    /**
     * @ORM\Column(name="`created`", type="datetime", nullable=true)
     */
    protected $created;

    /**
     * @ORM\OneToMany(targetEntity="MailAttachment", mappedBy="mailq", cascade={"persist", "merge", "remove"})
     * @ORM\JoinColumn(name="`id`", referencedColumnName="`mailq_id`")
     */
    protected $mailAttachments;

    /**
     * @ORM\OneToMany(targetEntity="MailqHasUser", mappedBy="mailq", cascade={"remove"})
     * @ORM\JoinColumn(name="`id`", referencedColumnName="`mailq_id`")
     */
    protected $mailqHasUsers;

    /**
     * @ORM\ManyToOne(targetEntity="User", inversedBy="mailqs")
     * @ORM\JoinColumn(name="`from_id`", referencedColumnName="`id`")
     */
    protected $user;

    public function __construct()
    {
        $this->mailAttachments = new ArrayCollection();
        $this->mailqHasUsers = new ArrayCollection();
    }

    /**
     * @ORM\PrePersist
     */
    public function PrePersist()
    {
        if(!isset($this->created)) {
            $this->created = new \DateTime();
        }
        $this->updated = new \DateTime();
    }

    /**
     * @ORM\PreUpdate
     */
    public function PreUpdate()
    {
        $this->updated = new \DateTime();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \ErsBase\Entity\Base\Mailq
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of from_id.
     *
     * @param integer $from_id
     * @return \ErsBase\Entity\Base\Mailq
     */
    public function setFromId($from_id)
    {
        $this->from_id = $from_id;

        return $this;
    }

    /**
     * Get the value of from_id.
     *
     * @return integer
     */
    public function getFromId()
    {
        return $this->from_id;
    }

    /**
     * Set the value of subject.
     *
     * @param string $subject
     * @return \ErsBase\Entity\Base\Mailq
     */
    public function setSubject($subject)
    {
        $this->subject = $subject;

        return $this;
    }

    /**
     * Get the value of subject.
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->subject;
    }

    /**
     * Set the value of text_message.
     *
     * @param string $text_message
     * @return \ErsBase\Entity\Base\Mailq
     */
    public function setTextMessage($text_message)
    {
        $this->text_message = $text_message;

        return $this;
    }

    /**
     * Get the value of text_message.
     *
     * @return string
     */
    public function getTextMessage()
    {
        return $this->text_message;
    }

    /**
     * Set the value of html_message.
     *
     * @param string $html_message
     * @return \ErsBase\Entity\Base\Mailq
     */
    public function setHtmlMessage($html_message)
    {
        $this->html_message = $html_message;

        return $this;
    }

    /**
     * Get the value of html_message.
     *
     * @return string
     */
    public function getHtmlMessage()
    {
        return $this->html_message;
    }

    /**
     * Set the value of is_html.
     *
     * @param boolean $is_html
     * @return \ErsBase\Entity\Base\Mailq
     */
    public function setIsHtml($is_html)
    {
        $this->is_html = $is_html;

        return $this;
    }

    /**
     * Get the value of is_html.
     *
     * @return boolean
     */
    public function getIsHtml()
    {
        return $this->is_html;
    }

    /**
     * Set the value of updated.
     *
     * @param \DateTime $updated
     * @return \ErsBase\Entity\Base\Mailq
     */
    public function setUpdated($updated)
    {
        $this->updated = $updated;

        return $this;
    }

    /**
     * Get the value of updated.
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->updated;
    }

    /**
     * Set the value of created.
     *
     * @param \DateTime $created
     * @return \ErsBase\Entity\Base\Mailq
     */
    public function setCreated($created)
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Get the value of created.
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * Add MailAttachment entity to collection (one to many).
     *
     * @param \ErsBase\Entity\Base\MailAttachment $mailAttachment
     * @return \ErsBase\Entity\Base\Mailq
     */
    public function addMailAttachment(MailAttachment $mailAttachment)
    {
        $this->mailAttachments[] = $mailAttachment;

        return $this;
    }

    /**
     * Remove MailAttachment entity from collection (one to many).
     *
     * @param \ErsBase\Entity\Base\MailAttachment $mailAttachment
     * @return \ErsBase\Entity\Base\Mailq
     */
    public function removeMailAttachment(MailAttachment $mailAttachment)
    {
        $this->mailAttachments->removeElement($mailAttachment);

        return $this;
    }

    /**
     * Get MailAttachment entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getMailAttachments()
    {
        return $this->mailAttachments;
    }

    /**
     * Add MailqHasUser entity to collection (one to many).
     *
     * @param \ErsBase\Entity\Base\MailqHasUser $mailqHasUser
     * @return \ErsBase\Entity\Base\Mailq
     */
    public function addMailqHasUser(MailqHasUser $mailqHasUser)
    {
        $this->mailqHasUsers[] = $mailqHasUser;

        return $this;
    }

    /**
     * Remove MailqHasUser entity from collection (one to many).
     *
     * @param \ErsBase\Entity\Base\MailqHasUser $mailqHasUser
     * @return \ErsBase\Entity\Base\Mailq
     */
    public function removeMailqHasUser(MailqHasUser $mailqHasUser)
    {
        $this->mailqHasUsers->removeElement($mailqHasUser);

        return $this;
    }

    /**
     * Get MailqHasUser entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getMailqHasUsers()
    {
        return $this->mailqHasUsers;
    }

    /**
     * Set User entity (many to one).
     *
     * @param \ErsBase\Entity\Base\User $user
     * @return \ErsBase\Entity\Base\Mailq
     */
    public function setUser(User $user = null)
    {
        $this->user = $user;

        return $this;
    }

    /**
     * Get User entity (many to one).
     *
     * @return \ErsBase\Entity\Base\User
     */
    public function getUser()
    {
        return $this->user;
    }

    /**
     * Populate entity with the given data.
     * The set* method will be used to set the data.
     *
     * @param array $data
     * @return boolean
     */
    public function populate(array $data = array())
    {
        foreach ($data as $field => $value) {
            $setter = sprintf('set%s', ucfirst(
                str_replace(' ', '', ucwords(str_replace('_', ' ', $field)))
            ));
            if (method_exists($this, $setter)) {
                $this->{$setter}($value);
            }
        }

        return true;
    }

    /**
     * Return a array with all fields and data.
     * Default the relations will be ignored.
     * 
     * @param array $fields
     * @return array
     */
    public function getArrayCopy(array $fields = array())
    {
        $dataFields = array('id', 'from_id', 'subject', 'text_message', 'html_message', 'is_html', 'updated', 'created');
        $relationFields = array('user');
        $copiedFields = array();
        foreach ($relationFields as $relationField) {
            $map = null;
            if (array_key_exists($relationField, $fields)) {
                $map = $fields[$relationField];
                $fields[] = $relationField;
                unset($fields[$relationField]);
            }
            if (!in_array($relationField, $fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $relationField)))));
            $relationEntity = $this->{$getter}();
            $copiedFields[$relationField] = (!is_null($map))
                ? $relationEntity->getArrayCopy($map)
                : $relationEntity->getArrayCopy();
            $fields = array_diff($fields, array($relationField));
        }
        foreach ($dataFields as $dataField) {
            if (!in_array($dataField, $fields) && !empty($fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $dataField)))));
            $copiedFields[$dataField] = $this->{$getter}();
        }

        return $copiedFields;
    }

    public function __sleep()
    {
        return array('id', 'from_id', 'subject', 'text_message', 'html_message', 'is_html', 'updated', 'created');
    }
}