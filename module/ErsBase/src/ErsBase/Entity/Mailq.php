<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.6-dev (doctrine2-realentity) on 2017-07-19 21:48:42.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace ErsBase\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Zend\Mail;
use Zend\Mime;

/**
 * ErsBase\Entity\Mailq
 *
 * @ORM\Entity()
 * @ORM\Table(name="`mailq`", indexes={@ORM\Index(name="fk_mailq_user1_idx", columns={"`from_id`"})})
 * @ORM\HasLifecycleCallbacks
 */
class Mailq extends Base\Mailq
{
    public function __construct()
    {
        parent::__construct();
    }

    public function getTextMessage() {
        $text_message = new Mime\Part($this->text_message);
        $text_message->type        = Mime\Mime::TYPE_TEXT;
        $text_message->charset     = 'utf-8';
        $text_message->encoding    = Mime\Mime::ENCODING_QUOTEDPRINTABLE;
        $text_message->disposition = Mime\Mime::DISPOSITION_INLINE;
        #$this->setIsHtml(false);
        
        return $text_message;
    }
    
    public function getHtmlMessage() {
        $html_message = new Mime\Part($this->html_message);
        $html_message->type        = Mime\Mime::TYPE_HTML;
        $html_message->charset     = 'utf-8';
        #$html_message->encoding    = Mime\Mime::ENCODING_8BIT;
        $html_message->encoding    = Mime\Mime::ENCODING_QUOTEDPRINTABLE;
        $html_message->disposition = Mime\Mime::DISPOSITION_INLINE;
        #$convert_html = mb_convert_encoding($markup, 'HTML-ENTITIES', 'UTF-8');
        $html2text = new \Html2Text\Html2Text($this->html_message);
        $text = $html2text->getText();
        $this->setTextMessage($text);
        #$this->setIsHtml(true);
        
        return $html_message;
    }
    
    public function getAttachments() {
        $attachments = [];
        foreach($this->mailAttachments as $attachment) {
            $pathToAtt = $attachment->getLocation();
            if(!file_exists($pathToAtt)) {
                $pathToAtt = getcwd() . '/' . $attachment->getLocation();
                if(!file_exists($pathToAtt)) {
                    throw new \Exception("Unable to add attachment");
                }
            }
            
            $att = new Mime\Part(file_get_contents($pathToAtt));
            $att->type = \mime_content_type($pathToAtt);
            $pattern = array(
                '/\ /'
            );
            $replace = array(
                '-',
            );
            $att->filename = preg_replace($pattern, $replace, basename($pathToAtt));
            $att->encoding    = Mime\Mime::ENCODING_BASE64;
            $att->disposition = Mime\Mime::DISPOSITION_ATTACHMENT;
            
            $attachments[] = $att;
        }
        
        return $attachments;
    }
    
    public function getFromUsers() {
        return $this->getUser();
    }
    
    public function getUsersByType($type) {
        $useremail = [];
        foreach($this->getMailqHasUsers() as $mailqHasUser) {
            if($mailqHasUser->getType() != $type) {
                continue;
            }
            
            $useremail[] = $mailqHasUser->getUser();
        }
        return $useremail;
    }
    
    public function setFrom(\ErsBase\Entity\Base\User $user) {
        $this->setUser($user);
        
        return $this;
    }
    public function getFrom() {
        return $this->getUser();
    }
    
    public function getTo() {
        return $this->getUsersByType('to');
    }
    public function getCc() {
        return $this->getUsersByType('cc');
    }
    public function getBcc() {
        return $this->getUsersByType('bcc');
    }
}