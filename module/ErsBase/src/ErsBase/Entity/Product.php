<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.6-dev (doctrine2-realentity) on 2016-01-07 08:26:28.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace ErsBase\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * ErsBase\Entity\Product
 *
 * @ORM\Entity()
 * @ORM\Table(name="product", indexes={@ORM\Index(name="fk_product_tax1_idx", columns={"tax_id"})})
 * @ORM\HasLifecycleCallbacks
 */
class Product extends Base\Product
{
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Set id of this object to null if it's cloned
     */
    public function __clone() {
        $this->id = null;
        
        $prices = $this->getProductPrices();
        $this->productPrices = new ArrayCollection();
        foreach ($prices as $price) {
            $clonePrice = clone $price;
            $this->addProductPrice($clonePrice);
            $clonePrice->setProduct($this);
        }
        
        $variants = $this->getProductVariants();
        $this->productVariants = new ArrayCollection();
        foreach ($variants as $variant) {
            $cloneVariant = clone $variant;
            $this->addProductVariant($cloneVariant);
            $cloneVariant->setProduct($this);
        }
    }

    /**
     * Get prices by agegroup
     * 
     * @param \ErsBase\Entity\Agegroup $agegroup
     * @return type
     */
    public function getProductPrice(Agegroup $agegroup = null, Deadline $deadline = null, $search = true) {
        $ret = new ProductPrice();
        foreach($this->getProductPrices() as $price) {
            /* 
             * if a agegroup is given but price has none
             */
            if($price->getAgegroup() == null && $agegroup != null) {
                continue;
            }
            /* 
             * if a deadline is given but price has none
             */
            if($price->getDeadline() == null && $deadline != null) {
                continue;
            }
            /*
             * if no agegroup is given but price has one
             */
            if($price->getAgegroup() != null && $agegroup == null) {
                continue;
            }
            /*
             * if no deadline is given but price has one
             */
            if($price->getDeadline() != null && $deadline == null) {
                continue;
            }
            /*
             * if agegroup does not match
             */
            if($price->getAgegroup() != null && $agegroup != null && $price->getAgegroup()->getId() != $agegroup->getId()) {
                continue;
            }
            /*
             * if deadline does not match
             */
            if($price->getDeadline() != null && $deadline != null && $price->getDeadline()->getId() != $deadline->getId()) {
                continue;
            }
            
            /*
             * at this point we should only have the prices we want, take the highest one.
             */
            if($ret->getCharge() < $price->getCharge()) {
                $ret = $price;
            }
        }
        
        if($ret->getCharge() == null && $search) {
            /*
             * start search only by agegroup
             */
            $ret = $this->getProductPrice($agegroup, null, false);
            if($ret->getCharge() == null) {
                $ret = $this->getProductPrice(null, null, false);
            }
        }
        
        return $ret;
    }
    
    public function getPriceCount() {
        return \count($this->getProductPrices());
    }
    
    /**
     * Get former prices for this product
     * 
     * @return array of \Entity\ProductPrice
     */
    public function getFormerPrices()
    {
        $now = new \DateTime();
        $diff = 0;
        $ret = new ArrayCollection();
        foreach($this->getProductPrices() as $price) {
            if($now > $price->getDeadline()->getDeadline()) {
                $ret[] = $price; 
            }
        }
        return $ret;
    }
    public function getFuturePrices()
    {
        $now = new \DateTime();
        $diff = 0;
        $ret = new ArrayCollection();
        foreach($this->getProductPrices() as $price) {
            if($now < $price->getDeadline()->getDeadline()) {
                $ret[] = $price; 
            }
        }
        return $ret;
    }
    
    public function getChildProducts() {
        return $this->getProductPackageRelatedByProductIds();
    }
    
    public function getParentProducts() {
        return $this->getProductPackageRelatedBySubProductIds();
    }
    
    public function getProductVariantByName($name) {
        foreach($this->getProductVariants() as $variant) {
            if($variant->getName() == $name) {
                return $variant;
            }
        }
        return false;
    }
}
